#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Å–∞ –∏ –æ–±—ä—ë–º–æ–≤ —Ç–µ–ª–∞
–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ JSON —Ñ–∞–π–ª–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
import json
import logging
from flask import Flask
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from keep_alive import keep_alive

keep_alive()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
DATA_DIR = "user_data"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
try:
    from config import (
        OPEN_ACCESS, ALLOWED_USER_IDS, ALLOWED_USERNAMES, 
        ADMIN_ONLY_MODE, ADMIN_USER_ID, UNAUTHORIZED_MESSAGE,
        LOG_UNAUTHORIZED_ATTEMPTS
    )
except ImportError:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ config.py –Ω–µ –Ω–∞–π–¥–µ–Ω
    OPEN_ACCESS = True
    ALLOWED_USER_IDS = []
    ALLOWED_USERNAMES = []
    ADMIN_ONLY_MODE = False
    ADMIN_USER_ID = None
    UNAUTHORIZED_MESSAGE = """
üö´ **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω**

–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.
–û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.

üë§ –¢–≤–æ–π ID: {user_id}
üìù Username: @{username}
    """
    LOG_UNAUTHORIZED_ATTEMPTS = True

class UserStatsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not os.path.exists(DATA_DIR):
            os.makedirs(DATA_DIR)
    
    def get_user_file_path(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return os.path.join(DATA_DIR, f"user_{user_id}.json")
    
    def load_user_data(self, user_id: int) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞"""
        file_path = self.get_user_file_path(user_id)
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                return {"records": []}
        return {"records": []}
    
    def save_user_data(self, user_id: int, data: Dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
        file_path = self.get_user_file_path(user_id)
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except IOError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def add_record(self, user_id: int, weight: float, waist: float, hips: float, chest: float) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        data = self.load_user_data(user_id)
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        new_record = {
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "weight": weight,
            "waist": waist,
            "hips": hips,
            "chest": chest
        }
        
        data["records"].append(new_record)
        return self.save_user_data(user_id, data)
    
    def get_latest_record(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        data = self.load_user_data(user_id)
        if data["records"]:
            return data["records"][-1]
        return None
    
    def get_previous_record(self, user_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        data = self.load_user_data(user_id)
        if len(data["records"]) >= 2:
            return data["records"][-2]
        return None
    
    def get_records_by_period(self, user_id: int, days: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        data = self.load_user_data(user_id)
        if not data["records"]:
            return []
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
        start_date = datetime.now() - timedelta(days=days)
        filtered_records = []
        
        for record in data["records"]:
            record_date = datetime.strptime(record["date"], "%Y-%m-%d %H:%M:%S")
            if record_date >= start_date:
                filtered_records.append(record)
        
        return filtered_records

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_manager = UserStatsManager()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
user_input_state = {}

def is_user_authorized(user_id: int, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    global ADMIN_USER_ID
    
    # –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    if OPEN_ACCESS:
        return True
    
    # –†–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω"
    if ADMIN_ONLY_MODE:
        if ADMIN_USER_ID is None:
            # –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            ADMIN_USER_ID = user_id
            logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω –±–æ—Ç–∞: {user_id}")
            return True
        return user_id == ADMIN_USER_ID
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in ALLOWED_USER_IDS:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
    if username and username.lower() in [u.lower() for u in ALLOWED_USERNAMES]:
        return True
    
    return False

def authorization_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        user_id = user.id
        username = user.username
        
        if not is_user_authorized(user_id, username):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞
            unauthorized_text = UNAUTHORIZED_MESSAGE.format(
                user_id=user_id,
                username=username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω',
                first_name=user.first_name
            )
            await update.message.reply_text(unauthorized_text)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if LOG_UNAUTHORIZED_ATTEMPTS:
                logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: {user_id} (@{username}) - {user.first_name}")
            return
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        return await func(update, context, *args, **kwargs)
    
    return wrapper

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ Telegram ID"""
    user = update.effective_user
    id_text = f"""
üÜî **–¢–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

üë§ –ò–º—è: {user.first_name}
üÜî ID: `{user.id}`
üìù Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üîó –°—Å—ã–ª–∫–∞: [tg://user?id={user.id}](tg://user?id={user.id})

–°–∫–æ–ø–∏—Ä—É–π —Å–≤–æ–π ID –∏ –æ—Ç–ø—Ä–∞–≤—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.
    """
    await update.message.reply_text(id_text)

def get_main_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–∞"""
    keyboard = [
        [KeyboardButton("üìä –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è")],
        [KeyboardButton("üìà –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

@authorization_required
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–≤–æ–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Å–∞ –∏ –æ–±—ä—ë–º–æ–≤ —Ç–µ–ª–∞.

–ß—Ç–æ —è —É–º–µ—é:
üìä –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≤–µ—Å, –æ–±—ä—ë–º—ã)
üìà –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
üìÖ –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ

–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!
    """
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )

@authorization_required
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = """
üîß –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

üìä –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è:
   ‚Ä¢ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è"
   ‚Ä¢ –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–µ—Å —Ç–∞–ª–∏—è –±—ë–¥—Ä–∞ –≥—Ä—É–¥—å
   ‚Ä¢ –ü—Ä–∏–º–µ—Ä: 70.5 80 95 90

üìà –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å:
   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
   ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥:
   ‚Ä¢ –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥: –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, 3 –º–µ—Å—è—Ü–∞
   ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏ –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π

üí° –°–æ–≤–µ—Ç—ã:
   ‚Ä¢ –ò–∑–º–µ—Ä—è–π—Å—è –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è –¥–Ω—è
   ‚Ä¢ –í–µ–¥–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ —É —Ç–µ–±—è
    """
    
    await update.message.reply_text(help_text)

@authorization_required
async def add_measurements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    user_input_state[user_id] = "waiting_for_measurements"
    
    instruction_text = """
üìä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π

–í–≤–µ–¥–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
**–≤–µ—Å —Ç–∞–ª–∏—è –±—ë–¥—Ä–∞ –≥—Ä—É–¥—å**

–ü—Ä–∏–º–µ—Ä: `70.5 80 95 90`

–ì–¥–µ:
‚Ä¢ –í–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)
‚Ä¢ –¢–∞–ª–∏—è –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 80)
‚Ä¢ –ë—ë–¥—Ä–∞ –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 95)
‚Ä¢ –ì—Ä—É–¥—å –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90)
    """
    
    await update.message.reply_text(instruction_text)

@authorization_required
async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å–∏
    latest = stats_manager.get_latest_record(user_id)
    previous = stats_manager.get_previous_record(user_id)
    
    if not latest:
        await update.message.reply_text(
            "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏–π.\n"
            "–ù–∞–∂–º–∏ '–î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    current_text = f"""
üìä **–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
üìÖ –î–∞—Ç–∞: {latest['date'][:10]}
‚öñÔ∏è –í–µ—Å: {latest['weight']} –∫–≥
üìê –¢–∞–ª–∏—è: {latest['waist']} —Å–º
üçë –ë—ë–¥—Ä–∞: {latest['hips']} —Å–º
üìè –ì—Ä—É–¥—å: {latest['chest']} —Å–º
    """
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if previous:
        changes_text = "\nüìà **–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞–∑–∞:**\n"
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç–∏
        weight_diff = latest['weight'] - previous['weight']
        waist_diff = latest['waist'] - previous['waist']
        hips_diff = latest['hips'] - previous['hips']
        chest_diff = latest['chest'] - previous['chest']
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        def format_change(value: float, unit: str) -> str:
            if value > 0:
                return f"+{value:.1f} {unit} üìà"
            elif value < 0:
                return f"{value:.1f} {unit} üìâ"
            else:
                return f"–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚û°Ô∏è"
        
        changes_text += f"‚öñÔ∏è –í–µ—Å: {format_change(weight_diff, '–∫–≥')}\n"
        changes_text += f"üìê –¢–∞–ª–∏—è: {format_change(waist_diff, '—Å–º')}\n"
        changes_text += f"üçë –ë—ë–¥—Ä–∞: {format_change(hips_diff, '—Å–º')}\n"
        changes_text += f"üìè –ì—Ä—É–¥—å: {format_change(chest_diff, '—Å–º')}\n"
        
        current_text += changes_text
    
    await update.message.reply_text(current_text)

@authorization_required
async def show_history_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    keyboard = [
        [KeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é"), KeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü")],
        [KeyboardButton("üìÖ –ó–∞ 3 –º–µ—Å—è—Ü–∞"), KeyboardButton("üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:",
        reply_markup=reply_markup
    )

@authorization_required
async def show_history_period(update: Update, context: ContextTypes.DEFAULT_TYPE, days: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    user_id = update.effective_user.id
    
    if days == -1:  # –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è
        data = stats_manager.load_user_data(user_id)
        records = data["records"]
        period_name = "–≤—Å—ë –≤—Ä–µ–º—è"
    else:
        records = stats_manager.get_records_by_period(user_id, days)
        period_name = f"{days} –¥–Ω–µ–π"
    
    if not records:
        await update.message.reply_text(
            f"üìÖ –ó–∞ {period_name} –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
    history_text = f"üìÖ **–ò—Å—Ç–æ—Ä–∏—è –∑–∞ {period_name}:**\n\n"
    
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
    display_records = records[-10:] if len(records) > 10 else records
    
    for i, record in enumerate(display_records, 1):
        date_str = record['date'][:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        history_text += f"**{i}. {date_str}**\n"
        history_text += f"‚öñÔ∏è {record['weight']}–∫–≥ | üìê {record['waist']}—Å–º | "
        history_text += f"üçë {record['hips']}—Å–º | üìè {record['chest']}—Å–º\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
    if len(records) >= 2:
        first_record = records[0]
        last_record = records[-1]
        
        weight_total_change = last_record['weight'] - first_record['weight']
        waist_total_change = last_record['waist'] - first_record['waist']
        hips_total_change = last_record['hips'] - first_record['hips']
        chest_total_change = last_record['chest'] - first_record['chest']
        
        history_text += f"ÔøΩ **–û–±—â–∏–µ –∏a–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥:**\n"
        history_text += f"‚öñÔ∏è –í–µ—Å: {weight_total_change:+.1f} –∫–≥\n"
        history_text += f"üìê –¢–∞–ª–∏—è: {waist_total_change:+.1f} —Å–º\n"
        history_text += f"üçë –ë—ë–¥—Ä–∞: {hips_total_change:+.1f} —Å–º\n"
        history_text += f"üìè –ì—Ä—É–¥—å: {chest_total_change:+.1f} —Å–º\n"
    
    if len(records) > 10:
        history_text += f"\nüìù –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑ {len(records)} –∑–∞–ø–∏—Å–µ–π"
    
    await update.message.reply_text(history_text, reply_markup=get_main_keyboard())

async def process_measurements_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–∑–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        values = text.split()
        if len(values) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        weight, waist, hips, chest = map(float, values)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        if not (30 <= weight <= 300):
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
        if not (40 <= waist <= 200):
            raise ValueError("–û–±—ä—ë–º —Ç–∞–ª–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 40 –¥–æ 200 —Å–º")
        if not (50 <= hips <= 200):
            raise ValueError("–û–±—ä—ë–º –±—ë–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 200 —Å–º")
        if not (50 <= chest <= 200):
            raise ValueError("–û–±—ä—ë–º –≥—Ä—É–¥–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 200 —Å–º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if stats_manager.add_record(user_id, weight, waist, hips, chest):
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            previous = stats_manager.get_previous_record(user_id)
            
            success_text = f"""
‚úÖ **–ò–∑–º–µ—Ä–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**

üìä –¢–≤–æ–∏ –Ω–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚öñÔ∏è –í–µ—Å: {weight} –∫–≥
üìê –¢–∞–ª–∏—è: {waist} —Å–º
üçë –ë—ë–¥—Ä–∞: {hips} —Å–º
üìè –ì—Ä—É–¥—å: {chest} —Å–º
            """
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if previous:
                weight_diff = weight - previous['weight']
                waist_diff = waist - previous['waist']
                
                success_text += f"\nüìà **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n"
                success_text += f"‚öñÔ∏è –í–µ—Å: {weight_diff:+.1f} –∫–≥\n"
                success_text += f"üìê –¢–∞–ª–∏—è: {waist_diff:+.1f} —Å–º"
            
            await update.message.reply_text(success_text, reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
    
    except ValueError as e:
        error_text = f"""
‚ùå **–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:**
{str(e)}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
**–≤–µ—Å —Ç–∞–ª–∏—è –±—ë–¥—Ä–∞ –≥—Ä—É–¥—å**

–ü—Ä–∏–º–µ—Ä: `70.5 80 95 90`
        """
        await update.message.reply_text(error_text)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞
    if user_id in user_input_state:
        del user_input_state[user_id]

@authorization_required
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –∏–∑–º–µ—Ä–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_input_state and user_input_state[user_id] == "waiting_for_measurements":
        await process_measurements_input(update, context)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Å –∫–Ω–æ–ø–æ–∫
    if text == "üìä –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è":
        await add_measurements(update, context)
    elif text == "üìà –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
        await show_progress(update, context)
    elif text == "üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥":
        await show_history_menu(update, context)
    elif text == "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é":
        await show_history_period(update, context, 7)
    elif text == "üìÖ –ó–∞ –º–µ—Å—è—Ü":
        await show_history_period(update, context, 30)
    elif text == "üìÖ –ó–∞ 3 –º–µ—Å—è—Ü–∞":
        await show_history_period(update, context, 90)
    elif text == "üìÖ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è":
        await show_history_period(update, context, -1)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        await update.message.reply_text(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_main_keyboard()
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä: export TELEGRAM_BOT_TOKEN='your_bot_token_here'")
        return
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(bot_token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("id", get_my_id))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()